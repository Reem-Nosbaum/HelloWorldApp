trigger:
- master

pool:
  name: Default
  demands:
    - agent.name -equals reem-ubuntu

variables:
  majorVersion: '1'
  minorVersion: '0'
  buildVersion: '$(Build.BuildId)'  # Automatically incremented with each build
  packageVersion: '$(majorVersion).$(minorVersion).$(buildVersion)'  # Custom versioning

steps:
# Step 0: Clean workspace to remove any cache
- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Clean previous build artifacts'

# Step 1: Prepare SonarQube for scanning
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'MySonarQubeServer'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'HelloWorldAppPipeline_HelloWorldAppPipeline_cc7094da-1837-455f-ae92-dfc1fbf03cb4'
    cliSources: '.'

# Step 2: Use the .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.108'

# Step 3: Print the Version to the Console and capture the branch name
- script: |
    echo "Building version $(packageVersion)"
    fullBranchName=$(Build.SourceBranchName)
    branchName=${fullBranchName##*/}  # This extracts just the branch name (e.g., 'master')
    echo "Captured Branch Name: ${branchName}"
    echo "Package will be named: ${branchName}_${packageVersion}"
  displayName: 'Print Version and Branch Name to Console'

# Step 4: Restore dependencies using dotnet restore
- script: |
    dotnet restore HelloWorldApp.sln
  displayName: 'Restore Dependencies'
  env:
    VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"https://pkgs.dev.azure.com/reemnu/HelloWorldAppPipeline/_packaging/HelloWorldAppArtifacts/nuget/v3/index.json","username":"AzureDevOps","password":"$(System.AccessToken)"}]}'

# Step 5: Build the project using dotnet build
- script: |
    dotnet build --configuration Release
  displayName: 'Build Project'

# Step 6: Run SonarQube analysis
- task: SonarQubeAnalyze@5
  displayName: 'Run SonarQube Analysis'

# Step 7: Publish the SonarQube quality gate result
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarQube Quality Gate'

# Step 8: Pack the project (create NuGet package)
- script: |
    branchName=$(Build.SourceBranchName)  # Get the current branch name
    branchName=${branchName##*/}  # Extract just the branch name (e.g., 'master')
    dotnet pack --configuration Release --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=$(packageVersion)
    mv $(Build.ArtifactStagingDirectory)/HelloWorldApp.$(packageVersion).nupkg $(Build.ArtifactStagingDirectory)/${branchName}_${packageVersion}.nupkg
  displayName: 'Pack Project as NuGet Package with Branch and Version'

# Step 9: Push the package to Azure Artifacts feed using dotnet
- script: |
    branchName=$(Build.SourceBranchName)
    branchName=${branchName##*/}  # Extract just the branch name (e.g., 'master')
    echo "Renaming the package to ${branchName}_${packageVersion}.nupkg"
    mv $(Build.ArtifactStagingDirectory)/*.nupkg $(Build.ArtifactStagingDirectory)/${branchName}_${packageVersion}.nupkg
    echo "Pushing ${branchName}_${packageVersion}.nupkg to Azure Artifacts"
    dotnet nuget push $(Build.ArtifactStagingDirectory)/${branchName}_${packageVersion}.nupkg --source "https://pkgs.dev.azure.com/reemnu/HelloWorldAppPipeline/_packaging/HelloWorldAppArtifacts/nuget/v3/index.json" --api-key $(System.AccessToken) --skip-duplicate
  displayName: 'Push NuGet Package with Branch and Version to Azure Artifacts'
  env:
    VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"https://pkgs.dev.azure.com/reemnu/HelloWorldAppPipeline/_packaging/HelloWorldAppArtifacts/nuget/v3/index.json","username":"AzureDevOps","password":"$(System.AccessToken)"}]}'
