trigger:
- master

pool:
  name: Default
  demands:
    - agent.name -equals reem-ubuntu

variables:
  majorVersion: '1'
  minorVersion: '0'
  buildVersion: '$(Build.BuildId)'  # Automatically incremented with each build
  packageVersion: '$(majorVersion).$(minorVersion).$(buildVersion)'  # Custom versioning

steps:
# Step 1: Prepare SonarQube for scanning
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'MySonarQubeServer'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'HelloWorldAppPipeline_HelloWorldAppPipeline_cc7094da-1837-455f-ae92-dfc1fbf03cb4'
    cliSources: '.'

# Step 2: Use the .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.108'

# Step 3: Print the Version to the Console
- script: |
    echo "Building version $(packageVersion)"
    echo "Branch name: $(Build.SourceBranchName)"
    echo "Package will be named: $(Build.SourceBranchName)_$(packageVersion)"
  displayName: 'Print Version and Branch Name to Console'

# Step 4: Restore dependencies using dotnet restore
- script: |
    dotnet restore HelloWorldApp.sln
  displayName: 'Restore Dependencies'
  env:
    VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"https://pkgs.dev.azure.com/reemnu/HelloWorldAppPipeline/_packaging/HelloWorldAppArtifacts/nuget/v3/index.json","username":"AzureDevOps","password":"$(System.AccessToken)"}]}'

# Step 5: Build the project using dotnet build
- script: |
    dotnet build --configuration Release
  displayName: 'Build Project'

# Step 6: Run SonarQube analysis
- task: SonarQubeAnalyze@5
  displayName: 'Run SonarQube Analysis'

# Step 7: Publish the SonarQube quality gate result
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarQube Quality Gate'

# Step 8: Pack the project (create NuGet package with branch name)
- script: |
    branchName=$(Build.SourceBranchName)  # Get the current branch name
    dotnet pack --configuration Release --output $(Build.ArtifactStagingDirectory) /p:PackageVersion=$(packageVersion) /p:PackageId=${branchName}_HelloWorldApp
  displayName: 'Pack Project as NuGet Package with Branch and Version'

# Step 9: Push the package to Azure Artifacts feed using dotnet
- script: |
    branchName=$(Build.SourceBranchName)
    echo "Pushing ${branchName}_$(packageVersion).nupkg to Azure Artifacts"
    dotnet nuget push $(Build.ArtifactStagingDirectory)/${branchName}_HelloWorldApp.$(packageVersion).nupkg --source "https://pkgs.dev.azure.com/reemnu/HelloWorldAppPipeline/_packaging/HelloWorldAppArtifacts/nuget/v3/index.json" --api-key $(System.AccessToken) --skip-duplicate
  displayName: 'Push NuGet Package with Branch and Version to Azure Artifacts'
  env:
    VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"https://pkgs.dev.azure.com/reemnu/HelloWorldAppPipeline/_packaging/HelloWorldAppArtifacts/nuget/v3/index.json","username":"AzureDevOps","password":"$(System.AccessToken)"}]}'
    
# Add a final step to send email notification
- script: |
    if [ "$(Build.Status)" == "Succeeded" ]; then
      STATUS="Success";
    else
      STATUS="Failure";
    fi
    echo "Sending email notification about pipeline status: $STATUS"
    echo "Pipeline Status: $STATUS" | mail -s "Pipeline Status: $STATUS" youremail@domain.com
  displayName: 'Send Email Notification'
  condition: always() # This ensures the email is sent even if the pipeline fails

